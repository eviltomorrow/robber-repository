// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	PushQuoteWeek(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Count, error)
	PushQuoteDay(ctx context.Context, opts ...grpc.CallOption) (Service_PushQuoteDayClient, error)
	PushStock(ctx context.Context, opts ...grpc.CallOption) (Service_PushStockClient, error)
	GetStockFull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Service_GetStockFullClient, error)
	GetQuoteLatest(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Service_GetQuoteLatestClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/repository.Service/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PushQuoteWeek(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/repository.Service/PushQuoteWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PushQuoteDay(ctx context.Context, opts ...grpc.CallOption) (Service_PushQuoteDayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/repository.Service/PushQuoteDay", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePushQuoteDayClient{stream}
	return x, nil
}

type Service_PushQuoteDayClient interface {
	Send(*Quote) error
	CloseAndRecv() (*Count, error)
	grpc.ClientStream
}

type servicePushQuoteDayClient struct {
	grpc.ClientStream
}

func (x *servicePushQuoteDayClient) Send(m *Quote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicePushQuoteDayClient) CloseAndRecv() (*Count, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Count)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) PushStock(ctx context.Context, opts ...grpc.CallOption) (Service_PushStockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], "/repository.Service/PushStock", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePushStockClient{stream}
	return x, nil
}

type Service_PushStockClient interface {
	Send(*Stock) error
	CloseAndRecv() (*Count, error)
	grpc.ClientStream
}

type servicePushStockClient struct {
	grpc.ClientStream
}

func (x *servicePushStockClient) Send(m *Stock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicePushStockClient) CloseAndRecv() (*Count, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Count)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetStockFull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Service_GetStockFullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[2], "/repository.Service/GetStockFull", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGetStockFullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_GetStockFullClient interface {
	Recv() (*Stock, error)
	grpc.ClientStream
}

type serviceGetStockFullClient struct {
	grpc.ClientStream
}

func (x *serviceGetStockFullClient) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetQuoteLatest(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Service_GetQuoteLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[3], "/repository.Service/GetQuoteLatest", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGetQuoteLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_GetQuoteLatestClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type serviceGetQuoteLatestClient struct {
	grpc.ClientStream
}

func (x *serviceGetQuoteLatestClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	PushQuoteWeek(context.Context, *wrapperspb.StringValue) (*Count, error)
	PushQuoteDay(Service_PushQuoteDayServer) error
	PushStock(Service_PushStockServer) error
	GetStockFull(*emptypb.Empty, Service_GetStockFullServer) error
	GetQuoteLatest(*QuoteRequest, Service_GetQuoteLatestServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedServiceServer) PushQuoteWeek(context.Context, *wrapperspb.StringValue) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushQuoteWeek not implemented")
}
func (UnimplementedServiceServer) PushQuoteDay(Service_PushQuoteDayServer) error {
	return status.Errorf(codes.Unimplemented, "method PushQuoteDay not implemented")
}
func (UnimplementedServiceServer) PushStock(Service_PushStockServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStock not implemented")
}
func (UnimplementedServiceServer) GetStockFull(*emptypb.Empty, Service_GetStockFullServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockFull not implemented")
}
func (UnimplementedServiceServer) GetQuoteLatest(*QuoteRequest, Service_GetQuoteLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuoteLatest not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Service/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PushQuoteWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PushQuoteWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Service/PushQuoteWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PushQuoteWeek(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PushQuoteDay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).PushQuoteDay(&servicePushQuoteDayServer{stream})
}

type Service_PushQuoteDayServer interface {
	SendAndClose(*Count) error
	Recv() (*Quote, error)
	grpc.ServerStream
}

type servicePushQuoteDayServer struct {
	grpc.ServerStream
}

func (x *servicePushQuoteDayServer) SendAndClose(m *Count) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicePushQuoteDayServer) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_PushStock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).PushStock(&servicePushStockServer{stream})
}

type Service_PushStockServer interface {
	SendAndClose(*Count) error
	Recv() (*Stock, error)
	grpc.ServerStream
}

type servicePushStockServer struct {
	grpc.ServerStream
}

func (x *servicePushStockServer) SendAndClose(m *Count) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicePushStockServer) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_GetStockFull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).GetStockFull(m, &serviceGetStockFullServer{stream})
}

type Service_GetStockFullServer interface {
	Send(*Stock) error
	grpc.ServerStream
}

type serviceGetStockFullServer struct {
	grpc.ServerStream
}

func (x *serviceGetStockFullServer) Send(m *Stock) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetQuoteLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).GetQuoteLatest(m, &serviceGetQuoteLatestServer{stream})
}

type Service_GetQuoteLatestServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type serviceGetQuoteLatestServer struct {
	grpc.ServerStream
}

func (x *serviceGetQuoteLatestServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Service_Version_Handler,
		},
		{
			MethodName: "PushQuoteWeek",
			Handler:    _Service_PushQuoteWeek_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushQuoteDay",
			Handler:       _Service_PushQuoteDay_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PushStock",
			Handler:       _Service_PushStock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStockFull",
			Handler:       _Service_GetStockFull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuoteLatest",
			Handler:       _Service_GetQuoteLatest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
